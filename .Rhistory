l1ou
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
index = sample(1:nrow(X),size=size,replace=replace)
X = l1ou:::generate_design_matrix(tree,'simpX')
size = 80
replace = FALSE
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
t = t(sqrt_OU_covariance(tree, alpha=0,root.model = "OUfixedRoot")$sqrtInvSigma)
X_t = t %*% X
Y_t = t %*% Y
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE,lambda = lambda)
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
the_rank
sort(the_rank)
sort(the_rank)[1:10]
sort(the_rank)[1:20]
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
sort(the_rank)[1:20]
devtools::check()
rm(list = c("backward_selection", "cmp_AICc", "cmp_BIC", "cmp_mBIC", "cmp_pBIC", "cmp_pBICess", "combine_ranking_seqs", "ELPASO", "forward_backward_selection", "forward_selection", "get_ranking_seqs"))
devtools::check()
lasso$beta
rm()
rm(ls())
rm(list = ls())
devtools::check()
geometric.mean(c(1,2,3))
geometric.mean(c(1,2,3))
library(MASS)
geometric.mean(c(1,2,3))
library(psych)
geometric.mean(c(1,2,3))
devtools::check()
devtools::check()
devtools::check()
data('lizard.tree')
data('lizard.traits')
tree = lizard.tree
Y = as.vector(lizard.traits[,1])ELMODEL = ELPASO(tree,Y)
data('lizard.tree')
data('lizard.traits')
tree = lizard.tree
Y = as.vector(lizard.traits[,1])ELMODEL = ELPASO(tree,Y)
data('lizard.tree')
data('lizard.traits')
tree = lizard.tree
Y = as.vector(lizard.traits[,1])
ELMODEL = ELPASO(tree,Y)
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
X = l1ou:::generate_design_matrix(tree,type='simpX')
t = t(sqrt_OU_covariance(tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
ALPHA
alpha
t = t(sqrt_OU_covariance(tree, alpha=0,root.model = "OUfixedRoot")$sqrtInvSigma)
if(method == "min"){
cseq = apply(rank_seqs,2,min)
} else if(method == "median"){
cseq = apply(rank_seqs,2,median)
} else if(method == "arith.mean"){
cseq = apply(rank_seqs,2,mean)
} else if(method == "geom.mean"){
cseq = apply(rank_seqs,2,geometric.mean)
} else if(method == "quantile"){
cseq = apply(rank_seqs,2,function(x)quantile(x,probs=q))
}
X_t = t %*% X
Y_t = t %*% Y
index = sample(1:nrow(X),size=size,replace=replace)
index = sample(1:nrow(X),size=80,replace=FALSE)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
return(cseq)
seqs = X[0,]
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
for(i in 1:200){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
for(i in 1:200){
index = sample(1:nrow(X),size=size,replace=FALSE)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
for(i in 1:200){
index = sample(1:nrow(X),size=80,replace=FALSE)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
penalty = 'LASSO'
for(i in 1:200){
index = sample(1:nrow(X),size=80,replace=FALSE)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO'
nsamples = 200size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO'
nsamples = 200;size = 0.8*length(Y);replace = FALSE;alpha = 0;sigma2 =1;sigma2_error = 0;xtype = 'simpX';penalty = 'LASSO'
if(alpha==0|xtype=='simpX'){
X = l1ou:::generate_design_matrix(tree,type='simpX')
}else{
X = l1ou:::generate_design_matrix(tree,type='orgX',alpha)
}
seqs = X[0,]
if(sigma2_error == 0){
t = t(sqrt_OU_covariance(tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
}else{
Vc = OU.vcv(tree,alpha)*sigma2 + diag(sigma2_error,length(tree$tip.label))
cp = svd(Vc)
t = cp$u %*% diag(1/sqrt(cp$d)) %*% t(cp$v)
}
X_t = t %*% X
Y_t = t %*% Y
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
seqs
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
lasso
lasso$beta
lasso$beta[1:(nrow(lasso$beta)),]
lasso$beta[1:(nrow(lasso$beta)),]!=0
rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0)
get_ranking_seqs = function(tree,Y,nsamples,size,replace=FALSE,alpha,sigma2,sigma2_error=0,xtype=c('simpX','orgX'), penalty = c('LASSO','SCAD')){
#xtype = match.arg(xtype)
#penalty = match.arg(penalty)
if(alpha==0|xtype=='simpX'){
X = l1ou:::generate_design_matrix(tree,type='simpX')
}else{
X = l1ou:::generate_design_matrix(tree,type='orgX',alpha)
}
seqs = X[0,]
if(sigma2_error == 0){
t = t(sqrt_OU_covariance(tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
}else{
Vc = OU.vcv(tree,alpha)*sigma2 + diag(sigma2_error,length(tree$tip.label))
cp = svd(Vc)
t = cp$u %*% diag(1/sqrt(cp$d)) %*% t(cp$v)
}
X_t = t %*% X
Y_t = t %*% Y
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
return(seqs)
}
rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0)
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
devtools::check()
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
rm(list =ls())
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
devtools::check()
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
data('lizard.tree')
data('lizard.traits')
tree = lizard.tree
Y = as.vector(lizard.traits[,1])
ELMODEL = ELPASO(tree,Y)
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
get_ranking_seqs
glmnet
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
get_ranking_seqs
get_ranking_seqs
get_ranking_seqs = get_ranking_seqs
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
setupLambda
sqrt_OU_covariance
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
lasso = glmnet(1lou:::generate_design_matrix(tree,'simpX'), as.vector(Y),
family='gaussian',intercept = FALSE,standaraize=FALSE)
lasso = glmnet(l1ou:::generate_design_matrix(tree,'simpX'), as.vector(Y),
family='gaussian',intercept = FALSE,standaraize=FALSE)
lasso$beta
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
get_ranking_seqs = function(tree,Y,nsamples,size,replace=FALSE,alpha,sigma2,sigma2_error=0,xtype=c('simpX','orgX'), penalty = c('LASSO','SCAD')){
#xtype = match.arg(xtype)
#penalty = match.arg(penalty)
if(alpha==0|xtype=='simpX'){
X = l1ou:::generate_design_matrix(tree,type='simpX')
}else{
X = l1ou:::generate_design_matrix(tree,type='orgX',alpha)
}
seqs = X[0,]
if(sigma2_error == 0){
t = t( (tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
}else{
Vc = OU.vcv(tree,alpha)*sigma2 + diag(sigma2_error,length(tree$tip.label))
cp = svd(Vc)
t = cp$u %*% diag(1/sqrt(cp$d)) %*% t(cp$v)
}
X_t = t %*% X
Y_t = t %*% Y
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
return(seqs)
}
get_ranking_seqs = function(tree,Y,nsamples,size,replace=FALSE,alpha,sigma2,sigma2_error=0,xtype=c('simpX','orgX'), penalty = c('LASSO','SCAD')){
#xtype = match.arg(xtype)
#penalty = match.arg(penalty)
if(alpha==0|xtype=='simpX'){
X = l1ou:::generate_design_matrix(tree,type='simpX')
}else{
X = l1ou:::generate_design_matrix(tree,type='orgX',alpha)
}
seqs = X[0,]
if(sigma2_error == 0){
t = t( (tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
}else{
Vc = OU.vcv(tree,alpha)*sigma2 + diag(sigma2_error,length(tree$tip.label))
cp = svd(Vc)
t = cp$u %*% diag(1/sqrt(cp$d)) %*% t(cp$v)
}
X_t = t %*% X
Y_t = t %*% Y
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
return(seqs)
}
get_ranking_seqs = function(tree,Y,nsamples,size,replace=FALSE,alpha,sigma2,sigma2_error=0,xtype=c('simpX','orgX'), penalty = c('LASSO','SCAD')){
#xtype = match.arg(xtype)
#penalty = match.arg(penalty)
if(alpha==0|xtype=='simpX'){
X = l1ou:::generate_design_matrix(tree,type='simpX')
}else{
X = l1ou:::generate_design_matrix(tree,type='orgX',alpha)
}
seqs = X[0,]
if(sigma2_error == 0){
t = t( (tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
}else{
Vc = OU.vcv(tree,alpha)*sigma2 + diag(sigma2_error,length(tree$tip.label))
cp = svd(Vc)
t = cp$u %*% diag(1/sqrt(cp$d)) %*% t(cp$v)
}
X_t = t %*% X
Y_t = t %*% Y
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
return(seqs)
}
get_ranking_seqs = function(tree,Y,nsamples,size,replace=FALSE,alpha,sigma2,sigma2_error=0,xtype=c('simpX','orgX'), penalty = c('LASSO','SCAD')){
#xtype = match.arg(xtype)
#penalty = match.arg(penalty)
if(alpha==0|xtype=='simpX'){
X = l1ou:::generate_design_matrix(tree,type='simpX')
}else{
X = l1ou:::generate_design_matrix(tree,type='orgX',alpha)
}
seqs = X[0,]
if(sigma2_error == 0){
t = t(sqrt_OU_covariance(tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
}else{
Vc = OU.vcv(tree,alpha)*sigma2 + diag(sigma2_error,length(tree$tip.label))
cp = svd(Vc)
t = cp$u %*% diag(1/sqrt(cp$d)) %*% t(cp$v)
}
X_t = t %*% X
Y_t = t %*% Y
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
return(seqs)
}
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
rm('get_ranking_seqs')
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
get_ranking_seqs
roxygen2::roxygenize(package.dir = ".")
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
devtools::check(manual = TRUE)
dev.off()
devtools::check(manual = TRUE)
data('lizard.tree')
data('lizard.traits')
tree = lizard.tree
data('lizard.traits')
library(l1ou)
data('lizard.traits')
data('lizard.tree')
tree = lizard.tree
Y = lizard.traits[,1]
ELPASO(tree,Y)
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
get_ranking_seqs()
get_ranking_seqs
get_ranking_seqs=function(tree,Y,nsamples,size,replace=FALSE,alpha,sigma2,sigma2_error=0,xtype=c('simpX','orgX'), penalty = c('LASSO','SCAD')){
#xtype = match.arg(xtype)
#penalty = match.arg(penalty)
if(alpha==0|xtype=='simpX'){
X = l1ou:::generate_design_matrix(tree,type='simpX')
}else{
X = l1ou:::generate_design_matrix(tree,type='orgX',alpha)
}
seqs = X[0,]
if(sigma2_error == 0){
t = t(sqrt_OU_covariance(tree, alpha=alpha,root.model = "OUfixedRoot")$sqrtInvSigma)
}else{
Vc = OU.vcv(tree,alpha)*sigma2 + diag(sigma2_error,length(tree$tip.label))
cp = svd(Vc)
t = cp$u %*% diag(1/sqrt(cp$d)) %*% t(cp$v)
}
X_t = t %*% X
Y_t = t %*% Y
for(i in 1:nsamples){
index = sample(1:nrow(X),size=size,replace=replace)
X_sample = X_t[index,]
Y_sample = Y_t[index,]
lambda = setupLambda(X_sample, Y_sample, family='gaussian', alpha=1, lambda.min=0.001, nlambda=100, penalty.factor=rep(1,ncol(X)))
lasso = glmnet(as.matrix(X_sample), as.vector(Y_sample),
family='gaussian',intercept = FALSE,standaraize=FALSE)
scad = ncvreg(X_sample,Y_sample,
family='gaussian',penalty='SCAD',normalize=FALSE,lambda = lambda)
if(penalty=='LASSO'){
the_rank = rank(-rowSums(lasso$beta[1:(nrow(lasso$beta)),]!=0))
}else{
the_rank = rank(-rowSums(scad$beta[2:(nrow(scad$beta)),]!=0))
}
seqs = rbind(seqs,the_rank)
}
return(seqs)
}
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
rm(get_ranking_seqs)
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
get_ranking_seqs()
get_ranking_seqs
get_ranking_seqs()
get_ranking_seqs
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
get_ranking_seqs(tree,Y,nsamples = 200,size = 0.8*length(Y),replace = FALSE,alpha = 0,sigma2 =1,sigma2_error = 0,xtype = 'simpX',penalty = 'LASSO')
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
roxygen2::roxygenize(package.dir = ".")
devtools::check(manual = TRUE)
install.packages("installr")
library(installr)
updateR()
updateR()
sessioninfo()
sessioninfo()
version
version
